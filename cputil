#!/usr/bin/python3

import os
import sys
import time
import platform
from subprocess import getstatusoutput
import string

def terminal(cmd):
    statusCode, output = getstatusoutput(cmd)

    if statusCode != 0:
        raise Exception('Non 0 return code from console')

    return output

DRIVER_DIR = '/sys/devices/system/cpu/cpufreq'
GOVERNORS = terminal('cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors').strip().split(' ')
POLICIES = terminal('ls ' + DRIVER_DIR + ' | grep policy').strip().split('\n')
GENERAL_DRIVER = '/sys/devices/system/cpu/'

FREQUENCIES = None
if 'scaling_available_frequencies' in terminal('ls /sys/devices/system/cpu/cpufreq/policy*/'):
    FREQUENCIES = max((
        scalingFreqs for scalingFreqs in
            terminal('cat /sys/devices/system/cpu/cpufreq/policy*/scaling_available_frequencies').strip().split('\n')),
        key=len
    ).strip().split(' ')

elif 'cpuinfo_max_freq' in terminal('ls /sys/devices/system/cpu/cpufreq/policy0/') and \
     'cpuinfo_min_freq' in terminal('ls /sys/devices/system/cpu/cpufreq/policy0/'):
    FREQUENCIES = [
        min(
            int(freq) for freq in terminal(f'cat {DRIVER_DIR}/policy*/cpuinfo_min_freq').strip().split('\n')
        ),
        max(
            int(freq) for freq in terminal(f'cat {DRIVER_DIR}/policy*/cpuinfo_max_freq').strip().split('\n')
        )
    ]

def setGovernor(governor, cpu):
    if governor not in GOVERNORS:
        return False

    if cpu is True:
        print('Setting governor for all processors to ' + governor)

        for policy in POLICIES:
            os.system(f'echo {governor} > {DRIVER_DIR}/{policy}/scaling_governor')

        return True
    else:
        policy = f'policy{cpu}'

        if policy in POLICIES:
            print('Setting governor for processor ' + str(cpu) + ' to ' + governor)
            os.system(f'echo {governor} > {DRIVER_DIR}/{policy}/scaling_governor')

            return True
        return False

def getCurrentGovernors():
    governors = {}
    for policy in POLICIES:
        governors[policy] = terminal(f'cat {DRIVER_DIR}/{policy}/scaling_governor').strip()

    return governors

def getCurrentScalingFrequencies():
    frequencies = {}

    for policy in POLICIES:
        frequencies[policy] = {
            'min' : terminal(f'cat {DRIVER_DIR}/{policy}/scaling_min_freq') if 'scaling_min_freq' in terminal(f'ls {DRIVER_DIR}/{policy}') else '',
            'max' : terminal(f'cat {DRIVER_DIR}/{policy}/scaling_max_freq') if 'scaling_max_freq' in terminal(f'ls {DRIVER_DIR}/{policy}') else ''
        }

    return frequencies

def setMinimumScalingFrequency(frequency, cpu):
    if FREQUENCIES is None:
        return False

    if cpu is True:
        if frequency not in FREQUENCIES:
            return False

        print('Setting for all processors minimum frequency to ' + str(round(int(frequency) / 1000000, 1)) + ' GHz')
        for policy in POLICIES:
            os.system(f'echo {frequency} > {DRIVER_DIR}/{policy}/scaling_min_freq')

        return True

    else:
        policy = f'policy{cpu}'
        if frequency not in FREQUENCIES:
            return False

        if policy in POLICIES:
            print('Setting for processor ' + str(cpu) + ' minimum frequency to ' + str(round(int(frequency) / 1000000, 1)) + ' GHz')

            os.system(f'echo {frequency} > {DRIVER_DIR}/{policy}/scaling_min_freq')
            return True
        return False

def setMaximumScalingFrequency(frequency, cpu):
    if FREQUENCIES is None:
        return False

    if frequency not in FREQUENCIES:
        return False

    if cpu is True:

        print('Setting for all processors maximum frequency to ' + str(round(int(frequency) / 1000000, 1)) + ' GHz')
        for policy in POLICIES:
            os.system(f'echo {frequency} > {DRIVER_DIR}/{policy}/scaling_max_freq')

        return True
    else:
        policy = f'policy{cpu}'

        if policy in POLICIES:
            print('Setting for processor ' + str(cpu) + ' maximum frequency to ' + str(round(int(frequency) / 1000000, 1)) + ' GHz')

            os.system(f'echo {frequency} > {DRIVER_DIR}/{policy}/scaling_max_freq')
            return True
        return False

def getModelName():
    return terminal('grep "model name" -i -m 1 /proc/cpuinfo | awk -F \':\'  \'{ print $2 }\'').strip()

def getByteOrder():
    order = sys.byteorder

    if order == 'little':
        return 'Little Endian' , 'LSB'

    elif order == 'big':
        return 'Big Endian', 'MSB'

    else:
        return '', ''

def getArchitecture():
    arch = platform.machine()

    if arch == 'x86_64':
        arch = 'amd64 / x86_64'

    elif arch == 'i386':
        arch = 'i386 / i686'

    elif arch == 'aarch64':
        arch = 'arm64 / aarch64'

    elif not arch:
        'amd64 / x86_64 ' if sys.maxsize == (2 ** 63 - 1) else 'i386 / i686'

    busSize = platform.architecture()[0]

    if not busSize:
        busSize = '64 it' if sys.maxsize == (2 ** 63 - 1) else '32bit'

    return f'{arch} ({busSize})'

def getDistinct(list):
    distinct = []

    for element in list:
        if element not in distinct:
            distinct.append(element)

    return distinct

def getCoreCount():
    try:
        cores = terminal(f'cat {GENERAL_DRIVER}/cpu*/topology/core_id').strip().split('\n')
    except:
        return ''

    return str(len(getDistinct(cores)))

def getThreadCount():
    return terminal('grep processor -c /proc/cpuinfo').strip()

def getClockBoost():
    try:
        if 'boost' in os.listdir(DRIVER_DIR):
            if '1' in terminal(f'cat {DRIVER_DIR}/boost'):
                return 'active'
            else:
                return 'not active'
        else:
            return 'not available'
    except:
        return 'not available'

def getMinimumClock():
    return round(min(
        int(freq) for freq in terminal(f'cat {DRIVER_DIR}/policy*/cpuinfo_min_freq').strip().split('\n')
    ) / 1000000, 2)

def getMaximumClock():
    return round(max(
        int(freq) for freq in terminal(f'cat {DRIVER_DIR}/policy*/cpuinfo_max_freq').strip().split('\n')
    ) / 1000000, 2)

def makeListStructure(stat):
    for index, line in enumerate(stat):
        splitted = line.split(' ')

        for element in splitted:
            if element == '' or element == ' ':
                splitted.remove(element)

        stat[index] = list(int(element) for element in splitted)
    return stat

usageContexts = [
    'user',
    'nice',
    'system',
    'idle',
    'iowait',
    'interrupt',
    'soft-interrupt'
]

def getParameterUsage(beforeStat, afterStat):
    usage = {}
    beforeSum = sum(beforeStat)
    afterSum = sum(afterStat)

    beforeIdle = beforeStat[3]
    afterIdle = afterStat[3]

    total = afterSum - beforeSum
    totalUsagePercent = (total - (afterIdle - beforeIdle)) * 100 / total
    usage['total'] = round(totalUsagePercent, 2)

    for index, label in enumerate(usageContexts):
        usage[label] = round(
            100 - (total - (afterStat[index] - beforeStat[index])) * 100 / total, 2
        )

    return usage

def cpuUsage():
    beforeStat = terminal('grep cpu -i /proc/stat | awk \'{ $1="" ; print }\'').strip().split('\n')
    time.sleep(0.25)
    afterStat = terminal('grep cpu -i /proc/stat | awk \'{ $1="" ; print }\'').strip().split('\n')

    try:
        beforeStat = makeListStructure(beforeStat)
        afterStat = makeListStructure(afterStat)
    except:
        return []

    usages = []
    for i in range(len(beforeStat)):
        usages.append(getParameterUsage(beforeStat[i], afterStat[i]))

    return usages

def cpuFrequency():
    frequencies = terminal('grep "cpu MHZ" -i /proc/cpuinfo | awk -F \':\' \'{ print $2 }\'').strip().split('\n')

    if not frequencies or frequencies == ['']:
        frequencies = []

        for policy in POLICIES:
            try:
                freq = terminal(f'cat {DRIVER_DIR}/{policy}/cpuinfo_cur_freq')

            except:
                return None, None

            else:
                freq = round(float(freq) / 1000, 2)
                frequencies.append(freq)

        avg = round(sum(frequencies) / len(frequencies), 2)
        return avg, frequencies

    else:
        frequencies = list(
            round(
                float(freq.replace(',', '.')),
                2
            ) for freq in frequencies
        )

        average = round(sum(frequencies) / len(frequencies), 2)
        return average, frequencies

def threadDistribution():
    driverDir = '/sys/devices/system/cpu'
    processors = {}

    for dir in os.listdir(driverDir):
        if dir.replace('cpu', '') and dir.replace('cpu', '')[0] not in string.ascii_letters:
            if 'topology' not in terminal(f'ls {driverDir}/{dir}') or \
               'core_id' not in terminal(f'ls {driverDir}/{dir}/topology'):
                return []
            processors[dir] = terminal(f'cat {driverDir}/{dir}/topology/core_id')

    res = []
    for processor in processorSort(processors.keys()):
        res.append(processors[processor])

    return res

def processorDieDistribution():
    driverDir = '/sys/devices/system/cpu'
    processors = {}

    for dir in os.listdir(driverDir):
        if dir.replace('cpu', '') and dir.replace('cpu', '')[0] not in string.ascii_letters:

            if 'topology' not in terminal(f'ls {driverDir}/{dir}') or \
               'die_id' not in terminal(f'ls {driverDir}/{dir}/topology'):
                return None

            processors[dir] = terminal(f'cat {driverDir}/{dir}/topology/die_id')

    res = []
    for processor in processorSort(processors.keys()):
        res.append(processors[processor])

    return res

def cpuCache():
    baseDir = '/sys/devices/system/cpu'
    cpuDirs = terminal('ls /sys/devices/system/cpu | grep -i cpu').split('\n')

    if 'cpufreq' in cpuDirs:
        cpuDirs.remove('cpufreq')

    if 'cpuidle' in cpuDirs:
        cpuDirs.remove('cpuidle')

    cpuCache = {}
    for cpu in cpuDirs:
        cpuCache[cpu] = {}

        for cacheIndex in terminal(f'ls {baseDir}/{cpu}/cache | grep index -i').split('\n'):
            try:
                size = terminal(f'cat {baseDir}/{cpu}/cache/{cacheIndex}/size')
            except:
                size = 'unknown'

            level = terminal(f'cat {baseDir}/{cpu}/cache/{cacheIndex}/level')
            sharing = terminal(f'cat {baseDir}/{cpu}/cache/{cacheIndex}/shared_cpu_list')

            if cpuCache[cpu].get(level) is not None and size != 'unknown':
                cpuCache[cpu][level]['amount'] += int(size.replace('K', '').replace('k', ''))

            else:
                cpuCache[cpu][level] = {
                    'amount' : int(size.replace('K', '').replace('k', ''))
                        if size != 'unknown' else size,
                    'shared' : sharing
                }

    return cpuCache

def processorsFromRange(processorRange):
    if '-' in processorRange:
        splittedRange = processorRange.split('-')
        start = int(splittedRange[0])

        if ',' in splittedRange[1]:
            end = splittedRange[1]
            rangeEnd = int(end.split(',')[0])

            additional = end.split(',')[1:]
            linearRange = list(range(start, rangeEnd + 1))

            for addition in additional:
                linearRange.append(addition)
            return linearRange

        else:
            end = int(splittedRange[1])

            return list(range(start, end + 1))
    return list(int(element) for element in processorRange.split(','))

def processorSort(processors):
    sorted = [None] * len(processors)

    for processor in processors:
        processorName = list((chr if chr not in string.ascii_letters else '') for chr in processor)

        index = int(''.join(processorName))
        sorted[index] = processor

    return sorted

def wrap(string):
    return '"' + string  + '"'

def jsonFormat():
    json = {}

    json[("model name")] = (getModelName())
    json[('architecture')] = (getArchitecture())
    json[('byte order')] = (getByteOrder()[0])

    json[('core count')] = int(getCoreCount())
    json[('thread count')] = int(getThreadCount())

    json[('clock boost')] = (getClockBoost())
    json[('minimum frequency')] = int(float(getMinimumClock()) * 1000)
    json[('maximum frequency')] = int(float(getMaximumClock()) * 1000)

    json[('governors')] = [ (governor) for governor in GOVERNORS ]
    json[('scaling frequencies')] = [ int(frequency) for frequency in FREQUENCIES ]

    scalingFrequencies = getCurrentScalingFrequencies()
    governors = getCurrentGovernors()

    usages = cpuUsage()
    averageFrequency, frequencies = cpuFrequency()

    try:
        cache = cpuCache()
    except:
        cache = None

    threadDist = threadDistribution()
    dieDist = processorDieDistribution()

    json[('average')] = {
        ("usage") : {}
    }

    for label, percent in usages.pop(0).items():
        json[('average')][('usage')][(label)] = float(percent)

    json[('average')][('frequency')] = int(averageFrequency) if averageFrequency else ''

    sortedCache = processorSort(cache.keys())

    for index, processor in enumerate(usages):
        processorId = ('processor' + str(index))
        json[processorId]= {
            ('usage') : {},
            ('frequency') : '',
            ('cache') : {},
            ('physical core') : '',
            ('physical die') : '',
            ('minimum scaling frequency') : '',
            ('maximum scaling frequency') : '',
            ('governor') : ''
        }

        try:
            scaling = scalingFrequencies[f'policy{index}']
            json[processorId][('minimum scaling frequency')] = int(scaling['min'])
            json[processorId][('maximum scaling frequency')] = int(scaling['max'])
        except:
            pass

        try:
            governor = governors[f'policy{index}']
            json[processorId][('governor')] = str(governor)
        except:
            pass

        for label, percent in processor.items():
            json[processorId][('usage')][(label)] = float(percent)

        json[processorId][('frequency')] = int(frequencies[index]) if frequencies and index < len(frequencies) and frequencies[index] is not None else ''
        json[processorId][('physical core')] = int(threadDist[index])
        json[processorId][('physical die')] = int(dieDist[index]) if dieDist else ''

        if cache is not None:
            processorCacheKey = sortedCache[index]
            for cacheLevel in cache[processorCacheKey]:

                sharing = processorsFromRange(cache[processorCacheKey][cacheLevel]['shared'])
                if len(sharing) == int(getThreadCount()):
                    sharing = ['all']

                json[processorId][('cache')][('L' + str(cacheLevel))] = {
                    ('sharing') : [", ".join( (str(processor)) for processor in sharing )],
                    ("amount") : int(level) if
                        isinstance((level := cache[processorCacheKey][cacheLevel]['amount']), str) and level.isdigit()
                        else level
                }

    return json

if __name__ == '__main__':
    args = sys.argv[1:]
    cpu = True

    if not args:
        print('Available governors:')

        for governor in GOVERNORS:
            print('\t' + governor)

        if FREQUENCIES is not None:
            print('\nAvailable scaling frequencies:')

            for frequency in FREQUENCIES:   
                print('\t' + str(frequency))

        print("\nCurrent status:")
        try:
            freqs = getCurrentScalingFrequencies()

        except:
            pass

        else:
            for index, governor in getCurrentGovernors().items():
                print(f'Processor {index.replace("policy", "")}: \t"{governor}" governor\tfrequency max = {freqs[index]["max"]}, min = {freqs[index]["min"]}')

    elif '-h' in args or '--help' in args:
        print('cputil: cpu util CLI v3.4.8')
        print('usage: cputil [OPTIONS]')
        print('\nOptions:')
        print('    -sg  --set-governor          GOVERNOR     set governor (root)')
        print('    -sfm --set-minimum-frequency FREQUENCY    set minimum frequency (root)')
        print('    -sfM --set-maximum-frequency FREQUENCY    set maximum frequency (root)')
        print('    -cpu CPU       Select which processor to affect with action,')
        print('                   if omitted the action will affect all processors,')
        print('                   to be used with -sg, -sfm, -sfM, -u')
        print('    -i   --info    Show info about CPU')
        print('    -g             Show general info only, to be used only with -i')
        print('    -u   --usage   Show CPU usage')
        print('    -avg           If specified, only average usage is shown,')
        print('                   to be used only with -u')
        print('    -j   --json    Outputs all the available informations in json format')

    elif '-j' in args or '--json' in args:
        print(jsonFormat().__repr__().replace("'", '"'))

    elif '-i' in args or '--info' in args:
        model = getModelName()
        if model:
            print('Model name:\t' + model)

        print('Architecture:\t' + getArchitecture())

        byteOrder, firstBit = getByteOrder()
        if byteOrder:
            print('Byte order:\t' + byteOrder + ' (first bit is ' + firstBit + ')')

        coreCount = getCoreCount()
        if coreCount:
            print('Cores count:\t' + coreCount)

        threadCount = getThreadCount()
        if threadCount:
            print('Threads count:\t' + str(threadCount))

        print(f'Clock boost:\t{getClockBoost()}')

        try:    print('Minimum clock:\t' + str(getMinimumClock()) + ' GHz')
        except: pass

        try:    print('Maximum clock:\t' + str(getMaximumClock()) + ' GHz')
        except: pass

        if '-g' in args:
            sys.exit(0)

        try:
            cache = cpuCache()
        except: sys.exit(0)

        try:
            threadDistribution = threadDistribution()
        except:
            threadDistribution = None

        try:
            dieDistribution = processorDieDistribution()
        except:
            dieDistribution = None

        for index, processor in enumerate(processorSort(cache.keys())):
            print(f'\nProcessor {index}:')

            for cacheLevel in cache[processor]:
                sharing = processorsFromRange(cache[processor][cacheLevel]["shared"])

                if len(sharing) == int(threadCount):
                    sharing = ['all']

                else:
                    sharing.remove(index)

                    if not sharing:
                        sharing = ['none']

                amount = cache[processor][cacheLevel]["amount"]

                print(f'    L{cacheLevel} cache: {amount} KB\tshared with processor(s): {", ".join(str(processor) for processor in sharing)}')

            if threadDistribution is not None:
                print(f'    Physical core: {threadDistribution[index]}')

            if dieDistribution is not None:
                print(f'    Physical die: {dieDistribution[index]}')

    elif '-u' in args or '--usage' in args:
        try:
            usages = cpuUsage()
            averageFrequency, frequencies = cpuFrequency()

        except KeyboardInterrupt:
            sys.exit(0)

        if '-cpu' in args:
            cpuIndex = args[args.index('-cpu') + 1]

            usage = usages[int(cpuIndex) + 1]
            if frequencies:
                frequency = frequencies[int(cpuIndex)]

            print(f'Processor: {cpuIndex}')
            for label, percent in usage.items():
                indent = '\t'

                if len(label) <= 9:
                    indent += '\t'

                print(f'    {label}:{indent}{percent} %')

            if frequencies:
                print(f'    Frequency:\t\t{frequency} MHz')

        else:
            print('Average:')

            for label, percent in usages[0].items():
                indent = '\t'

                if len(label) <= 9:
                    indent += '\t'

                print(f'    {label}:{indent}{percent} %')

            if averageFrequency:
                print(f'    Frequency:\t\t{averageFrequency} MHz')

            if '-avg' not in args:
                for index, thread in enumerate(usages[1:]):
                    print(f'\nProcessor: {index}')

                    for label, percent in thread.items():
                        indent = '\t'

                        if len(label) <= 9:
                            indent += '\t'

                        print(f'    {label}:{indent}{percent} %')

                    if frequencies and index < len(frequencies):
                        print(f'    Frequency: \t\t{frequencies[index]} MHz' )

    elif '-sg' in args or '--set-governor' in args: 
        if os.getuid():

            print('Governor setting requires root privilegies', file=sys.stderr)
            sys.exit(0) 

        try:    governor = args[args.index('-sg') + 1]
        except: governor = args[args.index('--set-governor') + 1]

        if '-cpu' in args:
            cpu = int(args[args.index('-cpu') + 1])

        if not setGovernor(governor, cpu):
            print('Error setting governor')

    elif '-sfm' in args or '--set-min-frequency' in args:
        if os.getuid():
            print('Scaling frequency setting requires root privilegies', file=sys.stderr)
            sys.exit(0) 

        try:    frequency = args[args.index('-sfm') + 1]
        except: frequency = args[args.index('--set-min-frequency') + 1]

        if '-cpu' in args:
            cpu = int(args[args.index('-cpu') + 1])

        if not setMinimumScalingFrequency(frequency, cpu):
            print('Error setting min frequency', file=sys.stderr)

    elif '-sfM' in args or '--set-max-frequency' in args:
        if os.getuid():
            print('Scaling frequency setting requires root privilegies', file=sys.stderr)
            sys.exit(0) 

        try:    frequency = args[args.index('-sfM') + 1]
        except: frequency = args[args.index('--set-max-frequency') + 1]

        if '-cpu' in args:
            cpu = int(args[args.index('-cpu') + 1])

        if not setMaximumScalingFrequency(frequency, cpu):
            print('Error setting max frequency', file=sys.stderr)

    else:
        arg = args[0]

        if arg[0] == '-':
            print(f'Error: unrecognised option "{arg}"')

        else:
            print(f'Error: unrecognised argument "{arg}"')
